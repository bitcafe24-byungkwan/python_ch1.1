
(2.8.3)
pip install psycopg2
mac : pip install psycopg2==2.7.5


- postgresql 에 db 생성 및 계정생성 접근 권한 부여
1. create database djdb
2. create user djdb with password 'djdb';
3. grant all privileges on all tables in schema public to djdb;
4. data/pg_hba.conf 접근 설정


django 설정

- pycharm 에서 django porj 시작하기

1. pycharm 프로젝트 생성(python 프로젝트)

2. Django 설치
   [터미널]
   pip install django
   
3. 장고 프로젝트 생성
   [터미널]
   django-admin startpoject python_ch3(프로젝트명ㅇ과같이)

4. 디렉토리 정리
   -> pycharm 프로젝트와 django 프로젝트의
      디렉토리 일치시키는 작업

5. psycopg2(postgres db lib) 설치
   [터미널]
    pip install psycopg2

6. settings.py 설정
   1) TIME_ZONE = 'Asia/Seoul'
   2) DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': 'djdb',
            'USER': 'djdb',
            'PASSWORD': 'djdb',
            'HOST': '192.168.1.250',
            'PORT': 5432
        }
    }
   3) Template 디렉토리 설정
      TEMPLATES = [
      . . .

      'DIRS': [os.path.join(BASE_DIR, 'templates')],
      . . .

      python_ch3
          |
          |------  templates (생성)


7. 장고 프로젝트의 기본 관리 어플리케이션이 사용하는 테이블을 생성
   [터미널]
   python manage.py migrate

8. 장고 프로젝트의 기본 관리 어플리케이션 로그인 계정 생성하기
   (관리 계정 생성하기)
   [터미널]
   python manage.py createsuperuser

9. 지금까지 작업 내용 확인하기
   [터미널]
   python manage.py runserver 0.0.0.0:8888


=========================================================

Application 작업
1. 어플리케이션 추가
   [터미널]
   python manage.py startapp helloworld
2. 어플리커이션 등록 (settings.py)
   INSTALLED_APPS = [
       'python_ch3',
       ...,
       ...
   ]
3. template
    |---- helloworld
    어플리케이션 templcate 디렉토리 생성

4. Model 정의(생략)

5. urls.py 에서 url-viewHandler method mapping

6. views.py 에서 핸들러 함수 추가 구현(요청처리, 모델작업, 응답처리)

7. 화면이 필요한 경우 template 작업


연습) emaillist
    1. 어플리케이션 추가
        [터미널]
         python manage.py startapp emaillist
    2. 어플리커이션 등록 (settings.py)
     INSTALLED_APPS = [
        'emaillist',
        ...,
        ...
     ]
    3. template
         |---- emaillist
         어플리케이션 templcate 디렉토리 생성

    4-1. Model 정의
    4-2. admin.py 에
        admin.site.register(Emaillist)
    4-3. migration 이름의 DDL python module 생성
        python manage.py makemigrations
    4-4. 물리DB와 스키마 동기화 작업을 한다.
        python manage.py migrate
    5. urls.py 에서 url-viewHandler method mapping

    6. views.py 에서 핸들러 함수 추가 구현(요청처리, 모델작업, 응답처리)

    7. 화면이 필요한 경우 template 작업
